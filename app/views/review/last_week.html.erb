<h1 class="page-title">Last Week Review</h1>
<h2 class="page-title"><%= @consumption[:start_date].inspect %> - <%= @consumption[:end_date].inspect %></h2>

<div class="dash-section">
	<h2 class="section-title">Journal</h2>
		<h5 class="section-sub-title">
			<% @journal_days = @journal.select{|date,done| done == true }.count %>
			<%= @journal_days %> of <%= @journal.count %> journal days = <%= (@journal_days / @journal.count.to_f * 100).round(2) %>%
		</h5>
		<div class="journal-chart"></div>
</div>

<div class="dash-section">
	<h2 class="section-title">Meditate</h2>
	<h5 class="section-sub-title">
		<% @meditation_days = @meditate.select{|date,done| done == true }.count %>
		<%= @meditation_days %> of <%= @meditate.count %> meditation days = <%= (@meditation_days / @meditate.count.to_f * 100).round(2) %>%
	</h5>
	<div class="meditation-chart"></div>
</div>

<div class="dash-section">
	<h2 class="section-title">Visualize Success</h2>
	<h5 class="section-sub-title">
		<% @visualization_days = @visualize.select{|date,done| done == true }.count %>
		<%= @visualization_days %> of <%= @visualize.count %> visualization days = <%= (@visualization_days / @visualize.count.to_f * 100).round(2) %>%
	</h5>
	<div class="visualization-chart"></div>
</div>

<div class="dash-section">
	<h2 class="section-title">Consumption</h2>

	<h5 class="section-sub-title">
		<%= @consumption[:wins] %> of 7 winning days = <%= @consumption[:percent_win] %>%
	</h5>
	
</div>

<div class="dash-section">
	<h2 class="section-title">Alcohol</h2>
	<h5 class="section-sub-title">
		<% @no_alcohl_days = @alcohol.select{|date,done| done == true }.count %>
		<%= @no_alcohl_days %> of <%= @alcohol.count %> no alcohol days = <%= (@no_alcohl_days / @alcohol.count.to_f * 100).round(2) %>%
	</h5>
	<div class="alcohol-chart"></div>
</div>

<div class="dash-section">
	<h2 class="section-title">Exercise</h2>

	<h5 class="section-sub-title">
		Exercised <%= @exercise[:exercise_days] %> of <%= @exercise[:total_days] %> days = <%= @exercise[:day_percent] %>%
		<br>
		<%= @exercise[:avg_mins_per_day] %> avg mins per day = <%= @exercise[:avg_mins_per_day_percent] %>% of 60 mins per day goal
		<br>
		<%= @exercise[:total_minutes] %> total weekly mins = <%= @exercise[:total_minutes_percent] %>% of 420 total weekly mins goal
	</h5>
	<br>
	<div class="exercise-chart"></div>
</div>


<div class="dash-section">
	<h2 class="section-title">Stretch</h2>
	<h5 class="section-sub-title">
		<% @stretch_days = @stretch.select{|date,done| done == true }.count %>
		<%= @stretch_days %> of <%= @stretch.count %> stretch days = <%= (@stretch_days / @stretch.count.to_f * 100).round(2) %>%
	</h5>
	
</div>

<div class="dash-section">
	<h2 class="section-title">AM Brush</h2>
	<h5 class="section-sub-title">
		<% @ambrush_days = @ambrush.select{|date,done| done == true }.count %>
		<%= @ambrush_days %> of <%= @ambrush.count %> am brush days = <%= (@ambrush_days / @ambrush.count.to_f * 100).round(2) %>%
	</h5>
	<div class="ambrush-chart"></div>
</div>

<div class="dash-section">
	<h2 class="section-title">PM Brush</h2>
	<h5 class="section-sub-title">
		<% @pmbrush_days = @pmbrush.select{|date,done| done == true }.count %>
		<%= @pmbrush_days %> of <%= @pmbrush.count %> pm brush days = <%= (@pmbrush_days / @pmbrush.count.to_f * 100).round(2) %>%
	</h5>
	<div class="pmbrush-chart"></div>
</div>

<div class="dash-section">
	<h2 class="section-title">Shower</h2>
	<h5 class="section-sub-title">
		<% @shower_days = @shower.select{|date,done| done == true }.count %>
		<%= @shower_days %> of <%= @shower.count %> shower days = <%= (@shower_days / @shower.count.to_f * 100).round(2) %>%
	</h5>
	<div class="shower-chart"></div>
</div>

<div class="dash-section">
	<h2 class="section-title">Sleep</h2>

	<h5 class="section-sub-title">
		<%= @sleep[:avg_hrs_per_night] %> avg hours per night = <%= @sleep[:avg_hrs_per_night_percent] %>% of 7 hrs per night goal
		<br>
		<%= @sleep[:total_hrs] %> total weekly hrs = <%= @sleep[:total_hrs_percent] %>% of 49 total weekly hours goal
	</h5>
	<br>
	<div class="sleep-chart"></div>
</div>

<div class="dash-section">
	<h2 class="section-title">HRV</h2>

	<h5 class="section-sub-title">
		<%= @hrv[:avg_hrv_per_night] %> avg hrv per night
	</h5>
	<br>
	<div class="hrv-chart"></div>
</div>



<!-- JOURNAL -->
<script>
	var data = <%= @journal_chart_data %>;

	var svgWidth = 400;
	var svgHeight = 100;

	var barPadding = 5;
	var numberOfBars = data.length;
	var barWidth = (svgWidth - (barPadding * (numberOfBars + 1))) / numberOfBars;

	var svg = d3.select('.journal-chart')
		.append('svg')
			.attr('width', svgWidth)
			.attr('height', svgHeight)
			.attr('class','bar-chart')
			.style('display','block').style('margin','auto');

	var yScale = d3.scaleLinear()
		.domain([0,d3.max(data)])
		.range([0,svgHeight-12]);

	var barChart = svg.selectAll('rect')
		.data(data)
		.enter()
			.append('rect')
			.attr('y', function(d){
				return svgHeight - yScale(d);
			})
			.attr('height', function(d){
				return yScale(d);
			})
			.attr('width', barWidth)
			.attr('transform', function(d,i){
				var translate = [(((barWidth + barPadding) * i) + barPadding), 0];
				return "translate(" + translate + ")";
			})
			.style("fill","orange")

	var text = svg.selectAll("text")
		.data(data)
		.enter()
		.append("text")
		.text(function(d){
			if (d === 1){
				return 'done';	
			}
			else{
				return 'not done';
			}
			
		})
		.attr('transform', function(d,i){
			if (d === 1){
				var translate = [(((barWidth + barPadding) * i) + barPadding + 12), svgHeight - (yScale(d)+3)];
			} else {
				var translate = [(((barWidth + barPadding) * i) + barPadding + 1), svgHeight - (yScale(d)+3)];
			}
			return "translate(" + translate + ")";
		})
		.style("fill","#FFF").style("font-weight","bold");	
</script>
<!-- MEDITATION -->
<script>
	var data = <%= @meditation_chart_data %>;

	var svgWidth = 400;
	var svgHeight = 100;

	var barPadding = 5;
	var numberOfBars = data.length;
	var barWidth = (svgWidth - (barPadding * (numberOfBars + 1))) / numberOfBars;

	var svg = d3.select('.meditation-chart')
		.append('svg')
			.attr('width', svgWidth)
			.attr('height', svgHeight)
			.attr('class','bar-chart')
			.style('display','block').style('margin','auto');

	var yScale = d3.scaleLinear()
		.domain([0,d3.max(data)])
		.range([0,svgHeight-12]);

	var barChart = svg.selectAll('rect')
		.data(data)
		.enter()
			.append('rect')
			.attr('y', function(d){
				return svgHeight - yScale(d);
			})
			.attr('height', function(d){
				return yScale(d);
			})
			.attr('width', barWidth)
			.attr('transform', function(d,i){
				var translate = [(((barWidth + barPadding) * i) + barPadding), 0];
				return "translate(" + translate + ")";
			})
			.style("fill","orange")

	var text = svg.selectAll("text")
		.data(data)
		.enter()
		.append("text")
		.text(function(d){
			if (d === 1){
				return 'done';	
			}
			else{
				return 'not done';
			}
			
		})
		.attr('transform', function(d,i){
			if (d === 1){
				var translate = [(((barWidth + barPadding) * i) + barPadding + 12), svgHeight - (yScale(d)+3)];
			} else {
				var translate = [(((barWidth + barPadding) * i) + barPadding + 1), svgHeight - (yScale(d)+3)];
			}
			return "translate(" + translate + ")";
		})
		.style("fill","#FFF").style("font-weight","bold");	
</script>
<!-- VISUALIZATION -->
<script>
	var data = <%= @visualize_chart_data %>;

	var svgWidth = 400;
	var svgHeight = 100;

	var barPadding = 5;
	var numberOfBars = data.length;
	var barWidth = (svgWidth - (barPadding * (numberOfBars + 1))) / numberOfBars;

	var svg = d3.select('.visualization-chart')
		.append('svg')
			.attr('width', svgWidth)
			.attr('height', svgHeight)
			.attr('class','bar-chart')
			.style('display','block').style('margin','auto');

	var yScale = d3.scaleLinear()
		.domain([0,d3.max(data)])
		.range([0,svgHeight-12]);

	var barChart = svg.selectAll('rect')
		.data(data)
		.enter()
			.append('rect')
			.attr('y', function(d){
				return svgHeight - yScale(d);
			})
			.attr('height', function(d){
				return yScale(d);
			})
			.attr('width', barWidth)
			.attr('transform', function(d,i){
				var translate = [(((barWidth + barPadding) * i) + barPadding), 0];
				return "translate(" + translate + ")";
			})
			.style("fill","orange")

	var text = svg.selectAll("text")
		.data(data)
		.enter()
		.append("text")
		.text(function(d){
			if (d === 1){
				return 'done';	
			}
			else{
				return 'not done';
			}
			
		})
		.attr('transform', function(d,i){
			if (d === 1){
				var translate = [(((barWidth + barPadding) * i) + barPadding + 12), svgHeight - (yScale(d)+3)];
			} else {
				var translate = [(((barWidth + barPadding) * i) + barPadding + 1), svgHeight - (yScale(d)+3)];
			}
			return "translate(" + translate + ")";
		})
		.style("fill","#FFF").style("font-weight","bold");	
</script>
<!-- ALCOHOL -->
<script>
	var data = <%= @alcohol_chart_data %>;

	var svgWidth = 400;
	var svgHeight = 100;

	var barPadding = 5;
	var numberOfBars = data.length;
	var barWidth = (svgWidth - (barPadding * (numberOfBars + 1))) / numberOfBars;

	var svg = d3.select('.alcohol-chart')
		.append('svg')
			.attr('width', svgWidth)
			.attr('height', svgHeight)
			.attr('class','bar-chart')
			.style('display','block').style('margin','auto');

	var yScale = d3.scaleLinear()
		.domain([0,d3.max(data)])
		.range([0,svgHeight-12]);

	var barChart = svg.selectAll('rect')
		.data(data)
		.enter()
			.append('rect')
			.attr('y', function(d){
				return svgHeight - yScale(d);
			})
			.attr('height', function(d){
				return yScale(d);
			})
			.attr('width', barWidth)
			.attr('transform', function(d,i){
				var translate = [(((barWidth + barPadding) * i) + barPadding), 0];
				return "translate(" + translate + ")";
			})
			.style("fill","orange")

	var text = svg.selectAll("text")
		.data(data)
		.enter()
		.append("text")
		.text(function(d){
			if (d === 1){
				return 'done';	
			}
			else{
				return 'not done';
			}
			
		})
		.attr('transform', function(d,i){
			if (d === 1){
				var translate = [(((barWidth + barPadding) * i) + barPadding + 12), svgHeight - (yScale(d)+3)];
			} else {
				var translate = [(((barWidth + barPadding) * i) + barPadding + 1), svgHeight - (yScale(d)+3)];
			}
			return "translate(" + translate + ")";
		})
		.style("fill","#FFF").style("font-weight","bold");
</script>
<!-- EXERCISE -->
<script>
	//d3.select('.exercise-chart').append('h1').text('text')

	var data = <%= @exercise_chart_data %>;

	var svgWidth = 400;
	var svgHeight = 100;

	var barPadding = 5;
	var numberOfBars = data.length;
	var barWidth = (svgWidth - (barPadding * (numberOfBars + 1))) / numberOfBars;

	var svg = d3.select('.exercise-chart')
		.append('svg')
			.attr('width', svgWidth)
			.attr('height', svgHeight)
			.attr('class','bar-chart')
			.style('display','block').style('margin','auto');

	var yScale = d3.scaleLinear()
		.domain([0,d3.max(data)])
		.range([0,svgHeight-12]);

	var barChart = svg.selectAll('rect')
		.data(data)
		.enter()
			.append('rect')
			.attr('y', function(d){
				return svgHeight - yScale(d);
			})
			.attr('height', function(d){
				return yScale(d);
			})
			.attr('width', barWidth)
			.attr('transform', function(d,i){
				var translate = [(((barWidth + barPadding) * i) + barPadding), 0];
				return "translate(" + translate + ")";
			})
			.style("fill","orange")

	var text = svg.selectAll("text")
		.data(data)
		.enter()
		.append("text")
		.text(function(d){
			return `${d} mins`;
		})
		.attr('transform', function(d,i){
			var translate = [(((barWidth + barPadding) * i) + barPadding + 1), svgHeight - (yScale(d)+3)];
			return "translate(" + translate + ")";
		})
		.style("fill","#FFF").style("font-weight","bold");
</script>
<!-- AM BRUSH -->
<script>
	var data = <%= @ambrush_chart_data %>;

	var svgWidth = 400;
	var svgHeight = 100;

	var barPadding = 5;
	var numberOfBars = data.length;
	var barWidth = (svgWidth - (barPadding * (numberOfBars + 1))) / numberOfBars;

	var svg = d3.select('.ambrush-chart')
		.append('svg')
			.attr('width', svgWidth)
			.attr('height', svgHeight)
			.attr('class','bar-chart')
			.style('display','block').style('margin','auto');

	var yScale = d3.scaleLinear()
		.domain([0,d3.max(data)])
		.range([0,svgHeight-12]);

	var barChart = svg.selectAll('rect')
		.data(data)
		.enter()
			.append('rect')
			.attr('y', function(d){
				return svgHeight - yScale(d);
			})
			.attr('height', function(d){
				return yScale(d);
			})
			.attr('width', barWidth)
			.attr('transform', function(d,i){
				var translate = [(((barWidth + barPadding) * i) + barPadding), 0];
				return "translate(" + translate + ")";
			})
			.style("fill","orange")

	var text = svg.selectAll("text")
		.data(data)
		.enter()
		.append("text")
		.text(function(d){
			if (d === 1){
				return 'done';	
			}
			else{
				return 'not done';
			}
			
		})
		.attr('transform', function(d,i){
			if (d === 1){
				var translate = [(((barWidth + barPadding) * i) + barPadding + 12), svgHeight - (yScale(d)+3)];
			} else {
				var translate = [(((barWidth + barPadding) * i) + barPadding + 1), svgHeight - (yScale(d)+3)];
			}
			return "translate(" + translate + ")";
		})
		.style("fill","#FFF").style("font-weight","bold");
</script>
<!-- PM BRUSH -->
<script>
	var data = <%= @pmbrush_chart_data %>;

	var svgWidth = 400;
	var svgHeight = 100;

	var barPadding = 5;
	var numberOfBars = data.length;
	var barWidth = (svgWidth - (barPadding * (numberOfBars + 1))) / numberOfBars;

	var svg = d3.select('.pmbrush-chart')
		.append('svg')
			.attr('width', svgWidth)
			.attr('height', svgHeight)
			.attr('class','bar-chart')
			.style('display','block').style('margin','auto');

	var yScale = d3.scaleLinear()
		.domain([d3.min(data),d3.max(data)])
		.range([0,svgHeight-12]);

	var barChart = svg.selectAll('rect')
		.data(data)
		.enter()
			.append('rect')
			.attr('y', function(d){
				return svgHeight - yScale(d);
			})
			.attr('height', function(d){
				return yScale(d);
			})
			.attr('width', barWidth)
			.attr('transform', function(d,i){
				var translate = [(((barWidth + barPadding) * i) + barPadding), 0];
				return "translate(" + translate + ")";
			})
			.style("fill","orange")

	var text = svg.selectAll("text")
		.data(data)
		.enter()
		.append("text")
		.text(function(d){
			if (d === 1){
				return 'done';	
			}
			else{
				return 'not done';
			}
			
		})
		.attr('transform', function(d,i){
			if (d === 1){
				var translate = [(((barWidth + barPadding) * i) + barPadding + 12), svgHeight - (yScale(d)+3)];
			} else {
				var translate = [(((barWidth + barPadding) * i) + barPadding + 1), svgHeight - (yScale(d)+3)];
			}
			return "translate(" + translate + ")";
		})
		.style("fill","#FFF").style("font-weight","bold");
</script>
<!-- SHOWER -->
<script>
	var data = <%= @shower_chart_data %>;

	var svgWidth = 400;
	var svgHeight = 100;

	var barPadding = 5;
	var numberOfBars = data.length;
	var barWidth = (svgWidth - (barPadding * (numberOfBars + 1))) / numberOfBars;

	var svg = d3.select('.shower-chart')
		.append('svg')
			.attr('width', svgWidth)
			.attr('height', svgHeight)
			.attr('class','bar-chart')
			.style('display','block').style('margin','auto');

	var yScale = d3.scaleLinear()
		.domain([d3.min(data),d3.max(data)])
		.range([0,svgHeight-12]);

	var barChart = svg.selectAll('rect')
		.data(data)
		.enter()
			.append('rect')
			.attr('y', function(d){
				return svgHeight - yScale(d);
			})
			.attr('height', function(d){
				return yScale(d);
			})
			.attr('width', barWidth)
			.attr('transform', function(d,i){
				var translate = [(((barWidth + barPadding) * i) + barPadding), 0];
				return "translate(" + translate + ")";
			})
			.style("fill","orange")

	var text = svg.selectAll("text")
		.data(data)
		.enter()
		.append("text")
		.text(function(d){
			if (d === 1){
				return 'done';	
			}
			else{
				return 'not done';
			}
			
		})
		.attr('transform', function(d,i){
			if (d === 1){
				var translate = [(((barWidth + barPadding) * i) + barPadding + 12), svgHeight - (yScale(d)+3)];
			} else {
				var translate = [(((barWidth + barPadding) * i) + barPadding + 1), svgHeight - (yScale(d)+3)];
			}
			return "translate(" + translate + ")";
		})
		.style("fill","#FFF").style("font-weight","bold");
</script>
<!-- SLEEP -->
<script type="text/javascript">
	
	var data = <%= Sleep.last_week_hrs_per_night_chart_data %>;

	var svgWidth = 400;
	var svgHeight = 100;

	var barPadding = 5;
	var numberOfBars = data.length;
	var barWidth = (svgWidth - (barPadding * (numberOfBars + 1))) / numberOfBars;

	var svg = d3.select('.sleep-chart')
		.append('svg')
			.attr('width', svgWidth)
			.attr('height', svgHeight)
			.attr('class','bar-chart')
			.style('display','block').style('margin','auto');

	var yScale = d3.scaleLinear()
		.domain([0,d3.max(data)])
		.range([0,svgHeight-12]);

	var barChart = svg.selectAll('rect')
		.data(data)
		.enter()
			.append('rect')
			.attr('y', function(d){
				return svgHeight - yScale(d);
			})
			.attr('height', function(d){
				return yScale(d);
			})
			.attr('width', barWidth)
			.attr('transform', function(d,i){
				var translate = [(((barWidth + barPadding) * i) + barPadding), 0];
				return "translate(" + translate + ")";
			})
			.style("fill", function(d){
				if (d >= 7){
					return "green";
				} else {
					return "red";	
				}
			})

	var text = svg.selectAll("text")
		.data(data)
		.enter()
		.append("text")
		.text(function(d){
			return `${d} hrs`;
		})
		.attr('transform', function(d,i){
			var translate = [(((barWidth + barPadding) * i) + barPadding + 8), svgHeight - (yScale(d)+3)];
			return "translate(" + translate + ")";
		})
		.style("fill","#FFF").style("font-weight","bold");
</script>
<!-- HRV -->
<script type="text/javascript">
	
	var data = <%= Hrv.last_week_hrv_per_night_chart_data %>;

	var svgWidth = 400;
	var svgHeight = 100;

	var barPadding = 5;
	var numberOfBars = data.length;
	var barWidth = (svgWidth - (barPadding * (numberOfBars + 1))) / numberOfBars;

	var svg = d3.select('.hrv-chart')
		.append('svg')
			.attr('width', svgWidth)
			.attr('height', svgHeight)
			.attr('class','bar-chart')
			.style('display','block').style('margin','auto');

	var yScale = d3.scaleLinear()
		.domain([0,d3.max(data)])
		.range([0,svgHeight-12]);

	var barChart = svg.selectAll('rect')
		.data(data)
		.enter()
			.append('rect')
			.attr('y', function(d){
				return svgHeight - yScale(d);
			})
			.attr('height', function(d){
				return yScale(d);
			})
			.attr('width', barWidth)
			.attr('transform', function(d,i){
				var translate = [(((barWidth + barPadding) * i) + barPadding), 0];
				return "translate(" + translate + ")";
			})
			.style("fill", function(d){
				if (d >= 40){
					return "green";
				} else {
					return "red";	
				}
			})

	var text = svg.selectAll("text")
		.data(data)
		.enter()
		.append("text")
		.text(function(d){
			return d;
		})
		.attr('transform', function(d,i){
			var translate = [(((barWidth + barPadding) * i) + barPadding + 18), svgHeight - (yScale(d)+3)];
			return "translate(" + translate + ")";
		})
		.style("fill","#FFF").style("font-weight","bold");
</script>

